# Brainity Course Web - Docker PowerShell Script

Write-Host "üöÄ Kh·ªüi ch·∫°y Brainity Course Web v·ªõi Docker..." -ForegroundColor Green

# Ki·ªÉm tra Docker
try {
    $dockerVersion = docker --version
    Write-Host "‚úÖ Docker: $dockerVersion" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Docker kh√¥ng ƒë∆∞·ª£c c√†i ƒë·∫∑t ho·∫∑c ch∆∞a kh·ªüi ƒë·ªông" -ForegroundColor Red
    Write-Host "Vui l√≤ng kh·ªüi ƒë·ªông Docker Desktop v√† th·ª≠ l·∫°i" -ForegroundColor Yellow
    exit 1
}

# Ki·ªÉm tra Docker Compose
try {
    $composeVersion = docker-compose --version
    Write-Host "‚úÖ Docker Compose: $composeVersion" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Docker Compose kh√¥ng ƒë∆∞·ª£c c√†i ƒë·∫∑t" -ForegroundColor Red
    exit 1
}

# Ki·ªÉm tra file .env
if (-not (Test-Path ".env")) {
    Write-Host "‚ö†Ô∏è  File .env kh√¥ng t·ªìn t·∫°i" -ForegroundColor Yellow
    Write-Host "T·∫°o file .env t·ª´ env-template.txt..." -ForegroundColor Yellow
    
    if (Test-Path "env-template.txt") {
        Copy-Item "env-template.txt" ".env"
        Write-Host "‚úÖ File .env ƒë√£ ƒë∆∞·ª£c t·∫°o t·ª´ template" -ForegroundColor Green
        Write-Host "Vui l√≤ng c·∫≠p nh·∫≠t c√°c environment variables trong file .env" -ForegroundColor Yellow
        Write-Host "Sau ƒë√≥ ch·∫°y l·∫°i script n√†y" -ForegroundColor Yellow
        exit 1
    } else {
        Write-Host "‚ùå Kh√¥ng t√¨m th·∫•y env-template.txt" -ForegroundColor Red
        exit 1
    }
}

Write-Host "‚úÖ File .env ƒë√£ t·ªìn t·∫°i" -ForegroundColor Green

# Ki·ªÉm tra tr·∫°ng th√°i Docker
try {
    $dockerInfo = docker info 2>&1
    if ($LASTEXITCODE -ne 0) {
        Write-Host "‚ö†Ô∏è  Docker Desktop ch∆∞a kh·ªüi ƒë·ªông ho√†n to√†n" -ForegroundColor Yellow
        Write-Host "ƒêang ch·ªù Docker Desktop kh·ªüi ƒë·ªông..." -ForegroundColor Yellow
        
        # Ch·ªù Docker kh·ªüi ƒë·ªông
        $maxAttempts = 30
        $attempt = 0
        do {
            Start-Sleep -Seconds 2
            $attempt++
            try {
                $null = docker ps 2>&1
                if ($LASTEXITCODE -eq 0) {
                    Write-Host "‚úÖ Docker Desktop ƒë√£ s·∫µn s√†ng" -ForegroundColor Green
                    break
                }
            } catch {
                # Continue waiting
            }
        } while ($attempt -lt $maxAttempts)
        
        if ($attempt -ge $maxAttempts) {
            Write-Host "‚ùå Docker Desktop kh√¥ng kh·ªüi ƒë·ªông ƒë∆∞·ª£c sau 60 gi√¢y" -ForegroundColor Red
            Write-Host "Vui l√≤ng ki·ªÉm tra Docker Desktop v√† th·ª≠ l·∫°i" -ForegroundColor Yellow
            exit 1
        }
    }
} catch {
    Write-Host "‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi Docker" -ForegroundColor Red
    exit 1
}

# Hi·ªÉn th·ªã menu
function Show-Menu {
    Clear-Host
    Write-Host "üìã Ch·ªçn ch·∫ø ƒë·ªô ch·∫°y:" -ForegroundColor Cyan
    Write-Host "1) Production Mode (Client + Server + MongoDB)" -ForegroundColor White
    Write-Host "2) Development Mode (v·ªõi hot reload)" -ForegroundColor White
    Write-Host "3) Production v·ªõi Nginx Reverse Proxy" -ForegroundColor White
    Write-Host "4) Ch·ªâ MongoDB" -ForegroundColor White
    Write-Host "5) Ch·ªâ Server" -ForegroundColor White
    Write-Host "6) Ch·ªâ Client" -ForegroundColor White
    Write-Host "7) D·ª´ng t·∫•t c·∫£ services" -ForegroundColor White
    Write-Host "8) Xem logs" -ForegroundColor White
    Write-Host "9) Rebuild images" -ForegroundColor White
    Write-Host "0) Tho√°t" -ForegroundColor White
    Write-Host ""
}

# Function ƒë·ªÉ ch·∫°y production mode
function Start-Production {
    Write-Host "üè≠ Kh·ªüi ch·∫°y Production Mode..." -ForegroundColor Yellow
    docker-compose up -d
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Production Mode ƒë√£ kh·ªüi ch·∫°y!" -ForegroundColor Green
        Write-Host "üåê Client: http://localhost:3000" -ForegroundColor Cyan
        Write-Host "üîß Server: http://localhost:8000" -ForegroundColor Cyan
        Write-Host "üóÑÔ∏è  MongoDB: localhost:27017" -ForegroundColor Cyan
    } else {
        Write-Host "‚ùå C√≥ l·ªói x·∫£y ra khi kh·ªüi ch·∫°y Production Mode" -ForegroundColor Red
    }
}

# Function ƒë·ªÉ ch·∫°y development mode
function Start-Development {
    Write-Host "üîß Kh·ªüi ch·∫°y Development Mode..." -ForegroundColor Yellow
    docker-compose --profile development up -d
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Development Mode ƒë√£ kh·ªüi ch·∫°y!" -ForegroundColor Green
        Write-Host "üåê Client: http://localhost:3000 (v·ªõi hot reload)" -ForegroundColor Cyan
        Write-Host "üîß Server: http://localhost:8000 (v·ªõi nodemon)" -ForegroundColor Cyan
        Write-Host "üóÑÔ∏è  MongoDB: localhost:27017" -ForegroundColor Cyan
    } else {
        Write-Host "‚ùå C√≥ l·ªói x·∫£y ra khi kh·ªüi ch·∫°y Development Mode" -ForegroundColor Red
    }
}

# Function ƒë·ªÉ ch·∫°y production v·ªõi nginx
function Start-ProductionNginx {
    Write-Host "üöÄ Kh·ªüi ch·∫°y Production Mode v·ªõi Nginx..." -ForegroundColor Yellow
    docker-compose --profile production up -d
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Production Mode v·ªõi Nginx ƒë√£ kh·ªüi ch·∫°y!" -ForegroundColor Green
        Write-Host "üåê Main URL: http://localhost" -ForegroundColor Cyan
        Write-Host "üîß API: http://localhost/api" -ForegroundColor Cyan
    } else {
        Write-Host "‚ùå C√≥ l·ªói x·∫£y ra khi kh·ªüi ch·∫°y Production Mode v·ªõi Nginx" -ForegroundColor Red
    }
}

# Function ƒë·ªÉ d·ª´ng services
function Stop-Services {
    Write-Host "üõë D·ª´ng t·∫•t c·∫£ services..." -ForegroundColor Yellow
    docker-compose down
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ T·∫•t c·∫£ services ƒë√£ ƒë∆∞·ª£c d·ª´ng!" -ForegroundColor Green
    } else {
        Write-Host "‚ùå C√≥ l·ªói x·∫£y ra khi d·ª´ng services" -ForegroundColor Red
    }
}

# Function ƒë·ªÉ xem logs
function Show-Logs {
    Write-Host "üìã Ch·ªçn service ƒë·ªÉ xem logs:" -ForegroundColor Cyan
    Write-Host "1) T·∫•t c·∫£ services" -ForegroundColor White
    Write-Host "2) Client" -ForegroundColor White
    Write-Host "3) Server" -ForegroundColor White
    Write-Host "4) MongoDB" -ForegroundColor White
    Write-Host "5) Nginx" -ForegroundColor White
    
    $logChoice = Read-Host "Nh·∫≠p l·ª±a ch·ªçn (1-5)"
    
    switch ($logChoice) {
        "1" { docker-compose logs -f }
        "2" { docker-compose logs -f client }
        "3" { docker-compose logs -f server }
        "4" { docker-compose logs -f mongodb }
        "5" { docker-compose logs -f nginx }
        default { Write-Host "‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá" -ForegroundColor Red }
    }
}

# Function ƒë·ªÉ rebuild images
function Rebuild-Images {
    Write-Host "üî® Rebuild t·∫•t c·∫£ images..." -ForegroundColor Yellow
    docker-compose build --no-cache
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Images ƒë√£ ƒë∆∞·ª£c rebuild!" -ForegroundColor Green
    } else {
        Write-Host "‚ùå C√≥ l·ªói x·∫£y ra khi rebuild images" -ForegroundColor Red
    }
}

# Main loop
do {
    Show-Menu
    $choice = Read-Host "Nh·∫≠p l·ª±a ch·ªçn (0-9)"
    
    switch ($choice) {
        "1" { Start-Production }
        "2" { Start-Development }
        "3" { Start-ProductionNginx }
        "4" { 
            Write-Host "üóÑÔ∏è  Kh·ªüi ch·∫°y ch·ªâ MongoDB..." -ForegroundColor Yellow
            docker-compose up mongodb -d
            if ($LASTEXITCODE -eq 0) {
                Write-Host "‚úÖ MongoDB ƒë√£ kh·ªüi ch·∫°y!" -ForegroundColor Green
                Write-Host "üóÑÔ∏è  MongoDB: localhost:27017" -ForegroundColor Cyan
            }
        }
        "5" { 
            Write-Host "üîß Kh·ªüi ch·∫°y ch·ªâ Server..." -ForegroundColor Yellow
            docker-compose up mongodb server -d
            if ($LASTEXITCODE -eq 0) {
                Write-Host "‚úÖ Server v√† MongoDB ƒë√£ kh·ªüi ch·∫°y!" -ForegroundColor Green
                Write-Host "üîß Server: http://localhost:8000" -ForegroundColor Cyan
            }
        }
        "6" { 
            Write-Host "üåê Kh·ªüi ch·∫°y ch·ªâ Client..." -ForegroundColor Yellow
            docker-compose up mongodb client -d
            if ($LASTEXITCODE -eq 0) {
                Write-Host "‚úÖ Client v√† MongoDB ƒë√£ kh·ªüi ch·∫°y!" -ForegroundColor Green
                Write-Host "üåê Client: http://localhost:3000" -ForegroundColor Cyan
            }
        }
        "7" { Stop-Services }
        "8" { Show-Logs }
        "9" { Rebuild-Images }
        "0" { 
            Write-Host "üëã T·∫°m bi·ªát!" -ForegroundColor Green
            exit 0
        }
        default { 
            Write-Host "‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng th·ª≠ l·∫°i." -ForegroundColor Red
        }
    }
    
    if ($choice -ne "8" -and $choice -ne "0") {
        Write-Host ""
        Read-Host "Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c"
    }
} while ($true) 